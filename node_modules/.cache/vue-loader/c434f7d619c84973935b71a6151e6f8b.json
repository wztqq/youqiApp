{"remainingRequest":"D:\\workspace\\youqingAPP\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\workspace\\youqingAPP\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\workspace\\youqingAPP\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace\\youqingAPP\\src\\oilgas\\youqigongyingguanli\\youqigongyingguanli.vue?vue&type=template&id=58bed598&scoped=true&","dependencies":[{"path":"D:\\workspace\\youqingAPP\\src\\oilgas\\youqigongyingguanli\\youqigongyingguanli.vue","mtime":1603503919459},{"path":"D:\\workspace\\youqingAPP\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1601287178724},{"path":"D:\\workspace\\youqingAPP\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1601287200994},{"path":"D:\\workspace\\youqingAPP\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1601287178724},{"path":"D:\\workspace\\youqingAPP\\node_modules\\vue-loader\\lib\\index.js","mtime":1601287200989},{"path":"D:\\workspace\\youqingAPP\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1601287178724},{"path":"D:\\workspace\\youqingAPP\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1601287200994},{"path":"D:\\workspace\\youqingAPP\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1601287178724},{"path":"D:\\workspace\\youqingAPP\\node_modules\\vue-loader\\lib\\index.js","mtime":1601287200989}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgcG9zaXRpb246ICJyZWxhdGl2ZSIsCiAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICB0b3A6ICI4MHB4IiwKICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICIjZGFkYmRiIgogICAgICB9CiAgICB9LAogICAgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0eWxlOiB7IGxlZnQ6IF92bS5zY3JlZW5MZWZ0IH0sIGF0dHJzOiB7IGlkOiAidGFiX2J1dHRvbiIgfSB9LAogICAgICAgIF92bS5fbChfdm0udGFibGlzdCwgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAga2V5OiBpbmRleCwKICAgICAgICAgICAgICBjbGFzczogWwogICAgICAgICAgICAgICAgeyB0YWJfYnV0dG9uX3R3bzogaW5kZXggPT0gX3ZtLnNlbGVjdGVkIH0sCiAgICAgICAgICAgICAgICB7IHRhYl9idXR0b25fb25lOiB0cnVlIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGFiQnV0dG9uKGluZGV4KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdihfdm0uX3MoaXRlbSkpXQogICAgICAgICAgKQogICAgICAgIH0pLAogICAgICAgIDAKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7IG5hbWU6ICJzaG93IiwgcmF3TmFtZTogInYtc2hvdyIsIHZhbHVlOiBfdm0uYSwgZXhwcmVzc2lvbjogImEiIH0KICAgICAgICAgIF0sCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjZGFkYmRiIiB9LAogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJjb25mZXNzX2NvbnRlbnQiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWFwIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvWW91cWlHb25neWluZy/lnLDlm74ucG5nIiksCiAgICAgICAgICAgICAgYWx0OiAi5Zu+54mH5pyq5pi+56S6IgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHJvZHVjZV9sb2dvIiwKICAgICAgICAgICAgICBzdHlsZTogeyBsZWZ0OiBfdm0ubG9nb19vbmUsIHRvcDogX3ZtLmxvZ29fb25lIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvWW91cWlHb25neWluZy95b3VqaW5nLnBuZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS50YW5jaHVhbmcgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNoYXJ0IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICI4cHgiLAogICAgICAgICAgICAgICAgImJhY2tncm91bmQtY29sb3IiOiAiI2RhZGJkYiIsCiAgICAgICAgICAgICAgICAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0YWJfb2lsIiB9LAogICAgICAgICAgICAgIF92bS5fbChfdm0udGFibGlzdF9vbmUsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFsKICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF90d286IGluZGV4ID09IF92bS5zZWxlY3RlZF9vbmUgfSwKICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF9vbmU6IHRydWUgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YWJCdXR0b25fb25lKGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoaXRlbSkpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIDAKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaTEsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJpMSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWNoYXJ0cyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJlY2hhcnRzT25lIiB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5pMiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImkyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJlY2hhcnRzIiwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogImVjaGFydHNUaHJlZSIgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNoYXJ0IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICI4cHgiLAogICAgICAgICAgICAgICAgImJhY2tncm91bmQtY29sb3IiOiAiI2RhZGJkYiIsCiAgICAgICAgICAgICAgICAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0YWJfb2lsIiB9LAogICAgICAgICAgICAgIF92bS5fbChfdm0udGFibGlzdF90d28sIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFsKICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF90d286IGluZGV4ID09IF92bS5zZWxlY3RlZF90d28gfSwKICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF9vbmU6IHRydWUgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YWJCdXR0b25fdHdvKGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoaXRlbSkpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIDAKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl9tKDApLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5qMSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImoxIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJlY2hhcnRzX3R3byIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJlY2hhcnRzVHdvIiB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5qMiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImoyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJlY2hhcnRzIiwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogImVjaGFydHNGb3VyIiB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7IG5hbWU6ICJzaG93IiwgcmF3TmFtZTogInYtc2hvdyIsIHZhbHVlOiBfdm0uYiwgZXhwcmVzc2lvbjogImIiIH0KICAgICAgICAgIF0sCiAgICAgICAgICBhdHRyczogeyBpZDogInByb2R1Y2VfY29udGVudCIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYXAiLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9Zb3VxaUdvbmd5aW5nL+WcsOWbvi5wbmciKSwKICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwcm9kdWNlX2xvZ28iLAogICAgICAgICAgICAgIHN0eWxlOiB7IGxlZnQ6IF92bS5sb2dvcG9zaW9ubGVmdDcsIHRvcDogX3ZtLmxvZ29wb3Npb250b3A3IH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvWW91cWlHb25neWluZy9nb25nY2hhbmcucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnRhbmNodWFuZzcgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udGM3LAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidGM3IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwcm9kdWNlX3RjIgogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl9tKDEpXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2hhcnQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjhweCIsCiAgICAgICAgICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICIjZGFkYmRiIiwKICAgICAgICAgICAgICAgICJtYXJnaW4tYm90dG9tIjogIjEwcHgiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRhYl9vaWwiIH0sCiAgICAgICAgICAgICAgX3ZtLl9sKF92bS50YWJsaXN0X3RocmVlLCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7IHRhYl9vaWxfdHdvOiBpbmRleCA9PSBfdm0uc2VsZWN0ZWRfdGhyZWUgfSwKICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF9vbmU6IHRydWUgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YWJCdXR0b25fdGhyZWUoaW5kZXgpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhpdGVtKSldCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgMAogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5wX2kxLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicF9pMSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWNoYXJ0cyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJlY2hhcnRzRml2ZSIgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucF9pMiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInBfaTIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImVjaGFydHMiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZWNoYXJ0c1NpeCIgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNoYXJ0IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICI4cHgiLAogICAgICAgICAgICAgICAgImJhY2tncm91bmQtY29sb3IiOiAiI2RhZGJkYiIsCiAgICAgICAgICAgICAgICAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0YWJfb2lsIiB9LAogICAgICAgICAgICAgIF92bS5fbChfdm0udGFibGlzdF9mb3VyLCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7IHRhYl9vaWxfdHdvOiBpbmRleCA9PSBfdm0uc2VsZWN0ZWRfZm91ciB9LAogICAgICAgICAgICAgICAgICAgICAgeyB0YWJfb2lsX29uZTogdHJ1ZSB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRhYkJ1dHRvbl9mb3VyKGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoaXRlbSkpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIDAKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb250U2l6ZV9kaXYiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvbnRTaXplX29uZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uVHdvRm9udCkpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb250U2l6ZV9vbmUiIH0sIFtfdm0uX3YoIuS4h+WQqCIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnBfajEsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwX2oxIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJlY2hhcnRzIiwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogImVjaGFyc1NldmVuIiB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5wX2oyLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicF9qMiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWNoYXJ0cyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJlY2hhcnRzRWlnaHQiIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaGFydCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiOHB4IiwKICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNkYWRiZGIiLAogICAgICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMTBweCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGFiX29pbCIgfSwKICAgICAgICAgICAgICBfdm0uX2woX3ZtLnRhYmxpc3RfZml2ZSwgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAga2V5OiBpbmRleCwKICAgICAgICAgICAgICAgICAgICBjbGFzczogWwogICAgICAgICAgICAgICAgICAgICAgeyB0YWJfb2lsX3R3bzogaW5kZXggPT0gX3ZtLnNlbGVjdGVkX2ZpdmUgfSwKICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF9vbmU6IHRydWUgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YWJCdXR0b25fZml2ZShpbmRleCkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKGl0ZW0pKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAwCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udFNpemVfZGl2X29uZSIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udFNpemVfb25lIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5UaHJlZUZvbnQpKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udFNpemVfb25lIiB9LCBbX3ZtLl92KCLkuIflkKgiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5wX2cxLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicF9nMSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWNoYXJ0cyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJlY2hhcnNOaW5lIiB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5wX2cyLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicF9nMiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWNoYXJ0cyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJlY2hhcnNUZW4iIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsgbmFtZTogInNob3ciLCByYXdOYW1lOiAidi1zaG93IiwgdmFsdWU6IF92bS5jLCBleHByZXNzaW9uOiAiYyIgfQogICAgICAgICAgXSwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNkYWRiZGIiIH0sCiAgICAgICAgICBhdHRyczogeyBpZDogImNvbmZlc3NfY29udGVudCIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYXAiLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9Zb3VxaUdvbmd5aW5nL+WcsOWbvi5wbmciKSwKICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaGFydCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiOHB4IiwKICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNkYWRiZGIiLAogICAgICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMTBweCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGFiX29pbCIgfSwKICAgICAgICAgICAgICBfdm0uX2woX3ZtLnRhYmxpc3Rfc2l4LCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7IHRhYl9vaWxfdHdvOiBpbmRleCA9PSBfdm0uc2VsZWN0ZWRfc2l4IH0sCiAgICAgICAgICAgICAgICAgICAgICB7IHRhYl9vaWxfb25lOiB0cnVlIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGFiQnV0dG9uX3NpeChpbmRleCkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKGl0ZW0pKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAwCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnRfaTEsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0X2kxIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJlY2hhcnRzIiwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogImVjaGFydHNFbGV2ZW4iIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnRfaTIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0X2kyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJlY2hhcnRzIiwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogImVjaGFydHNUd2VsdmUiIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaGFydCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiOHB4IiwKICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNkYWRiZGIiLAogICAgICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMTBweCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGFiX29pbCIgfSwKICAgICAgICAgICAgICBfdm0uX2woX3ZtLnRhYmxpc3Rfc2V2ZW4sIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFsKICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF90d286IGluZGV4ID09IF92bS5zZWxlY3RlZF9zZXZlbiB9LAogICAgICAgICAgICAgICAgICAgICAgeyB0YWJfb2lsX29uZTogdHJ1ZSB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRhYkJ1dHRvbl9zZXZlbihpbmRleCkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKGl0ZW0pKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAwCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udF9qMSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInRfajEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImVjaGFydHMiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZWNoYXJ0c1RoaXJ0ZWVuIiB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS50X2oyLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidF9qMiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWNoYXJ0c190d28iLAogICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZWNoYXJ0c0ZvdXJ0ZWVuIiB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7IG5hbWU6ICJzaG93IiwgcmF3TmFtZTogInYtc2hvdyIsIHZhbHVlOiBfdm0uZCwgZXhwcmVzc2lvbjogImQiIH0KICAgICAgICAgIF0sCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjZGFkYmRiIiB9LAogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJjb25mZXNzX2NvbnRlbnQiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWFwIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvWW91cWlHb25neWluZy9tenEucG5nIiksCiAgICAgICAgICAgICAgYWx0OiAi5Zu+54mH5pyq5pi+56S6IgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2hhcnQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjhweCIsCiAgICAgICAgICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICIjZGFkYmRiIiwKICAgICAgICAgICAgICAgICJtYXJnaW4tYm90dG9tIjogIjEwcHgiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRhYl9vaWwiIH0sCiAgICAgICAgICAgICAgX3ZtLl9sKF92bS50YWJsaXN0X2VpZ2h0LCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7IHRhYl9vaWxfdHdvOiBpbmRleCA9PSBfdm0uc2VsZWN0ZWRfZWlnaHQgfSwKICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF9vbmU6IHRydWUgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YWJCdXR0b25fZWlnaHQoaW5kZXgpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhpdGVtKSldCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgMAogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX20oMyksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZfaTEsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmX2kxIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJlY2hhcnRzIiwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogImVjaGFydHNGaWZ0ZWVuIiB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5mX2kyLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZl9pMiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWNoYXJ0c190d28iLAogICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZWNoYXJ0c1NpeHRlZW4iIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaGFydCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgICAgICAgICAgaGVpZ2h0OiAiOHB4IiwKICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNkYWRiZGIiLAogICAgICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMTBweCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGFiX29pbCIgfSwKICAgICAgICAgICAgICBfdm0uX2woX3ZtLnRhYmxpc3RfbmluZSwgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAga2V5OiBpbmRleCwKICAgICAgICAgICAgICAgICAgICBjbGFzczogWwogICAgICAgICAgICAgICAgICAgICAgeyB0YWJfb2lsX3R3bzogaW5kZXggPT0gX3ZtLnNlbGVjdGVkX25pbmUgfSwKICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF9vbmU6IHRydWUgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YWJCdXR0b25fbmluZShpbmRleCkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKGl0ZW0pKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAwCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fbSg0KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZl9qMSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZfajEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImVjaGFydHMiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZWNoYXJ0c1NldmVudGVlbiIgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZl9qMiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZfajIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImVjaGFydHNfdHdvIiwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogImVjaGFydHNFaWdodGVlbiIgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udFNpemVfZGl2IiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udFNpemUiIH0sIFtfdm0uX3YoIjAuNjYiKV0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvbnRTaXplIiB9LCBbX3ZtLl92KCLnq4vmlrnnsbMiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidWwiLCBbCiAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIuaIkOWTgeayueS8geS4miIpXSksCiAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIuS8geS4muS6uuaVsO+8mjEzMDDkuroiKV0pLAogICAgICBfYygibGkiLCBbX3ZtLl92KCLkuIrmnIjmsb3msrnkvpvlupTph4/vvJoxMDDkuIflkKgiKV0pLAogICAgICBfYygibGkiLCBbX3ZtLl92KCLkuIrmnIjmn7TmsrnkvpvlupTph4/vvJo4OTDkuIflkKgiKV0pLAogICAgICBfYygibGkiLCBbX3ZtLl92KCLkuIrmnIjoiKrnhaTmsrnkvpvlupTph4/vvJo4OTnkuIflkKgiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvbnRTaXplX2RpdmMiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb250U2l6ZSIgfSwgW192bS5fdigiMC42NiIpXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udFNpemUiIH0sIFtfdm0uX3YoIueri+aWueexsyIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udFNpemVfZGl2YiIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvbnRTaXplIiB9LCBbX3ZtLl92KCIwLjY2IildKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb250U2l6ZSIgfSwgW192bS5fdigi56uL5pa557GzIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb250U2l6ZV9kaXZhIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udFNpemUiIH0sIFtfdm0uX3YoIjAuNjYiKV0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvbnRTaXplIiB9LCBbX3ZtLl92KCLnq4vmlrnnsbMiKV0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}