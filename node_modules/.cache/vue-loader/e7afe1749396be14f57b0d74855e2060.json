{"remainingRequest":"D:\\ht\\app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\ht\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ht\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ht\\app\\src\\oilgas\\youqifenxi\\chuqing.vue?vue&type=template&id=72ddc54c&scoped=true&","dependencies":[{"path":"D:\\ht\\app\\src\\oilgas\\youqifenxi\\chuqing.vue","mtime":1607316427418},{"path":"D:\\ht\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147158029},{"path":"D:\\ht\\app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1605147184540},{"path":"D:\\ht\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147158029},{"path":"D:\\ht\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1605147184539}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgcG9zaXRpb246ICJyZWxhdGl2ZSIsCiAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICB0b3A6ICI5M3B4IiwKICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICIjREFEQkRCIgogICAgICB9CiAgICB9LAogICAgWwogICAgICBfYygiZGl2IiwgeyBjbGFzczogW3sgdGFuY2h1YW5nOiB0cnVlIH0sIHsgdGFuY2h1YW5nX29uZTogX3ZtLnNob3cgfV0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAwJSIsIGhlaWdodDogIjEwMCUiLCBvdmVyZmxvdzogImF1dG8iIH0gfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInRhYmxlIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGFibGVfb25lX3QiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJ0ciIsCiAgICAgICAgICAgICAgICAgIF92bS5fbChfdm0udGFibGVUaCwgZnVuY3Rpb24odGgsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJ0aCIsIHsga2V5OiBpbmRleCB9LCBbX3ZtLl92KF92bS5fcyh0aCkpXSkKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLmxpc3REYXRhLCBmdW5jdGlvbih0ciwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICJ0ciIsCiAgICAgICAgICAgICAgICAgICAgeyBrZXk6IGluZGV4IH0sCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKHRyLCBmdW5jdGlvbih0ZCwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfYygidGQiLCB7IGtleTogaW5kZXggfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKHRkKSArICIgIikKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMgogICAgICAgICAgICApCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgc3R5bGU6IHsgbGVmdDogX3ZtLmNsb3NlTGVmdCB9LAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJjbG9zZSIsCiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9pbmR1c3RyeUFuYWx5c2lzL+WFs+mXrS5wbmciKSwKICAgICAgICAgICAgYWx0OiAi5Zu+54mH5pyq5pi+56S6IgogICAgICAgICAgfSwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRhbmNodWFuZ0Nsb3NlKCkKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0eWxlOiB7IGxlZnQ6IF92bS5zY3JlZW5MZWZ0IH0sIGF0dHJzOiB7IGlkOiAidGFiX2J1dHRvbiIgfSB9LAogICAgICAgIF92bS5fbChfdm0udGFibGlzdCwgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAga2V5OiBpbmRleCwKICAgICAgICAgICAgICBjbGFzczogWwogICAgICAgICAgICAgICAgeyB0YWJfYnV0dG9uX3R3bzogaW5kZXggPT0gX3ZtLnNlbGVjdGVkIH0sCiAgICAgICAgICAgICAgICB7IHRhYl9idXR0b25fb25lOiB0cnVlIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGFiQnV0dG9uKGluZGV4KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdihfdm0uX3MoaXRlbSkpXQogICAgICAgICAgKQogICAgICAgIH0pLAogICAgICAgIDAKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7IG5hbWU6ICJzaG93IiwgcmF3TmFtZTogInYtc2hvdyIsIHZhbHVlOiBfdm0uYSwgZXhwcmVzc2lvbjogImEiIH0KICAgICAgICAgIF0sCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjREFEQkRCIiB9LAogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJjb25mZXNzX2NvbnRlbnQiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYnRuX2NodXFpbmciIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJidG5fc2hlbmNoYW5fZGl2IiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgY2xhc3M6IFsKICAgICAgICAgICAgICAgICAgICB7IGJ0bl9zaGVuY2hhbl94dWFuOiBfdm0uYnRuX3NoZW5jaGFuX251bSB9LAogICAgICAgICAgICAgICAgICAgIHsgYnRuX3NoZW5jaGFuX3dlaTogIV92bS5idG5fc2hlbmNoYW5fbnVtIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmJ0bk9pbCgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nX3Byb2R1Y2UiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLmltZ1VybF9vaWwsIGFsdDogIuWbvueJh+acquaYvuekuiIgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICJhYnNvbHV0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogIjhweCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICIyNXB4IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigi5Y6f5rK5IildCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGNsYXNzOiBbCiAgICAgICAgICAgICAgICAgICAgeyBidG5fc2hlbmNoYW5feHVhbjogIV92bS5idG5fc2hlbmNoYW5fbnVtIH0sCiAgICAgICAgICAgICAgICAgICAgeyBidG5fc2hlbmNoYW5fd2VpOiBfdm0uYnRuX3NoZW5jaGFuX251bSB9CiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5idG5HYXMoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZ19wcm9kdWNlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IF92bS5pbWdVcmxfZ2FzLCBhbHQ6ICLlm77niYfmnKrmmL7npLoiIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICIzMnB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogIjI1cHgiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCLlpKnnhLbmsJQiKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ub2lsU2hvdyA/IHRydWUgOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAib2lsU2hvdz90cnVlOmZhbHNlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZmxhZyA9PSAiMSIgfHwgX3ZtLnNob3dBbGwsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmbGFnPT0nMSd8fHNob3dBbGwiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImxheS1jb250ZW50IiwKICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC4wNTgpLAogICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNTYyKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLlkInnpaXmsrnnlLDljLrln58iKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLmsrnnlLDkuKrmlbDvvJoy5LiqIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5o6i5piO5YKo6YeP77yaNTYy5LiH5ZCoIildKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZsYWcgPT0gIjIiIHx8IF92bS5zaG93QWxsLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZmxhZz09JzInfHxzaG93QWxsIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsYXktY29udGVudCIsCiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuMzk4KSwKICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3ZtLmJlX2NsaWNrX3RvcCgwLjY0OSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5YyF5bCU5rK555Sw5Yy65Z+fIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5rK555Sw5Liq5pWw77yaMuS4qiIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuaOouaYjuWCqOmHj++8mjc1MOS4h+WQqCIpXSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5mbGFnID09ICIzIiB8fCBfdm0uc2hvd0FsbCwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZsYWc9PSczJ3x8c2hvd0FsbCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGF5LWNvbnRlbnQiLAogICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjM1OCksCiAgICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoMC4zNTgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuS6jOi/nuayueeUsOWMuuWfnyIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuayueeUsOS4quaVsO+8mjbkuKoiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLmjqLmmI7lgqjph4/vvJo3NTAw5LiH5ZCoIildKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZsYWcgPT0gIjUiIHx8IF92bS5zaG93QWxsLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZmxhZz09JzUnfHxzaG93QWxsIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsYXktY29udGVudCIsCiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNjk4KSwKICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3ZtLmJlX2NsaWNrX3RvcCgwLjEwOCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5rW35ouJ5bCU5rK555Sw5Yy65Z+fIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5rK555Sw5Liq5pWw77yaNeS4qiIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuaOouaYjuWCqOmHj++8mjg0MzfkuIflkKgiKV0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZmxhZyA9PSAiNCIgfHwgX3ZtLnNob3dBbGwsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmbGFnPT0nNCd8fHNob3dBbGwiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImxheS1jb250ZW50IiwKICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC42OTgpLAogICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuMzQ4KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLnp5HlsJTmsoHmsrnnlLDljLrln58iKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLmsrnnlLDkuKrmlbDvvJoz5LiqIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5o6i5piO5YKo6YeP77yaMTEyNeS4h+WQqCIpXSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5mbGFnID09ICI2IiB8fCBfdm0uc2hvd0FsbCwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZsYWc9PSc2J3x8c2hvd0FsbCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGF5LWNvbnRlbnQiLAogICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjcwOCksCiAgICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoMC42MzgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuenkeWwlOW6t+ayueeUsOWMuuWfnyIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuayueeUsOS4quaVsO+8mjLkuKoiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLmjqLmmI7lgqjph4/vvJozNzXkuIflkKgiKV0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsaWNrYnRuIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuMzQ0KSwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNjM4KQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L3lvdXRvbmcucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vaWxIYW5kZWwoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZWNoYXJ0cy5kYXRhX29uZV9qaXNodSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lY2hhcnRzLmxlbmdlbmRfZGF0YV9qaXNodV9vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiMzUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVjaGFydHMuZGF0YV9vbmVfamluZ2ppLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjE0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIxIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudAogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsaWNrYnRuIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNTM4KSwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNjAyKQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L3lvdXRvbmcucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vaWxIYW5kZWwoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZWNoYXJ0cy5kYXRhX3R3b19qaXNodSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lY2hhcnRzLmxlbmdlbmRfZGF0YV9qaXNodV90d28sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiNDciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVjaGFydHMuZGF0YV90d29famluZ2ppLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjE4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIyIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsaWNrYnRuIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNjU2KSwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNDY1KQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L3lvdXRvbmcucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vaWxIYW5kZWwoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZWNoYXJ0cy5kYXRhX3RocmVlX2ppc2h1LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVjaGFydHMubGVuZ2VuZF9kYXRhX2ppc2h1X3RocmVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjQ4MCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZWNoYXJ0cy5kYXRhX3RocmVlX2ppbmdqaSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIxODAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG4iLAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC43NCksCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3ZtLmJlX2NsaWNrX3RvcCgwLjI4NSkKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvcHJvZHVjZS1meC95b3V0b25nLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub2lsSGFuZGVsKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVjaGFydHMuZGF0YV9maXZlX2ppc2h1LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVjaGFydHMubGVuZ2VuZF9kYXRhX2ppc2h1X2ZpdmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiNjM2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lY2hhcnRzLmRhdGFfZml2ZV9qaW5namksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiMjc4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI1IgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsaWNrYnRuIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNzYpLAogICAgICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoMC41MTUpCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3Byb2R1Y2UtZngveW91dG9uZy5wbmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAi5Zu+54mH5pyq5pi+56S6IgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9pbEhhbmRlbCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lY2hhcnRzLmRhdGFfZm91cl9qaXNodSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lY2hhcnRzLmxlbmdlbmRfZGF0YV9qaXNodV9mb3VyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjcxIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lY2hhcnRzLmRhdGFfZm91cl9qaW5namksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiMjgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG4iLAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC44MiksCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3ZtLmJlX2NsaWNrX3RvcCgwLjU5NSkKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvcHJvZHVjZS1meC95b3V0b25nLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub2lsSGFuZGVsKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVjaGFydHMuZGF0YV9zaXhfamlzaHUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZWNoYXJ0cy5sZW5nZW5kX2RhdGFfamlzaHVfc2l4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjI0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lY2hhcnRzLmRhdGFfc2l4X2ppbmdqaSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI2IgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ub2lsU2hvdyA/IGZhbHNlIDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAib2lsU2hvdz9mYWxzZTp0cnVlIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZmxhZ0dhcyA9PSAiMSIgfHwgX3ZtLnNob3dBbGxHYXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmbGFnR2FzPT0nMSd8fHNob3dBbGxHYXMiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImxheS1jb250ZW50IiwKICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC4xNDgpLAogICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNzEyKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLoi4/ph4zmoLzmsJTnlLDljLrln58iKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLmsJTnlLDkuKrmlbDvvJo15LiqIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5o6i5piO5YKo6YeP77yaMTE5MDDkuIfnq4vmlrnnsbMiKV0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZmxhZ0dhcyA9PSAiMiIgfHwgX3ZtLnNob3dBbGxHYXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmbGFnR2FzPT0nMid8fHNob3dBbGxHYXMiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImxheS1jb250ZW50IiwKICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC4xOTgpLAogICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNDI5KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLljIXlsJTmsJTnlLDljLrln58iKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLmsJTnlLDkuKrmlbDvvJox5LiqIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5o6i5piO5YKo6YeP77yaNTYw5LiH56uL5pa557GzIildKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmZsYWdHYXMgPT0gIjMiIHx8IF92bS5zaG93QWxsR2FzLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZmxhZ0dhcz09JzMnfHxzaG93QWxsR2FzIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsYXktY29udGVudCIsCiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNjA4KSwKICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3ZtLmJlX2NsaWNrX3RvcCgwLjUzOCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5LqM6L+e5rCU55Sw5Yy65Z+fIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5rCU55Sw5Liq5pWw77yaMuS4qiIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuaOouaYjuWCqOmHj++8mjcwMOS4h+eri+aWueexsyIpXSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5mbGFnR2FzID09ICI0IiB8fCBfdm0uc2hvd0FsbEdhcywKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZsYWdHYXM9PSc0J3x8c2hvd0FsbEdhcyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGF5LWNvbnRlbnQiLAogICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjQ0OCksCiAgICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoMC4xNDgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIua1t+aLieWwlOawlOeUsOWMuuWfnyIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuayueeUsOS4quaVsO+8mjLkuKoiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLmjqLmmI7lgqjph4/vvJo4NDDkuIfnq4vmlrnnsbMiKV0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsaWNrYnRuMSIsCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjQ0KSwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNzIpCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3Byb2R1Y2UtZngvcWl0aWFuLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZ2FzSGFuZGVsKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVjaGFydHMuZGF0YUdhc19vbmVfamlzaHUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZWNoYXJ0cy5sZW5nZW5kR2FzX2RhdGFfb25lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjAuMzQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVjaGFydHMuZGF0YUdhc19vbmVfamluZ2ppLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjAuNTYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG4xIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNSksCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3ZtLmJlX2NsaWNrX3RvcCgwLjU1MikKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvcHJvZHVjZS1meC9xaXRpYW4ucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5nYXNIYW5kZWwoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZWNoYXJ0cy5kYXRhR2FzX3R3b19qaXNodSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lY2hhcnRzLmxlbmdlbmRHYXNfZGF0YV90d28sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiMC4wMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZWNoYXJ0cy5kYXRhR2FzX3R3b19qaW5namksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiMC4wMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiMiIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbGlja2J0bjEiLAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC42NjYpLAogICAgICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoMC40ODUpCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3Byb2R1Y2UtZngvcWl0aWFuLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZ2FzSGFuZGVsKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVjaGFydHMuZGF0YUdhc190aHJlZV9qaXNodSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lY2hhcnRzLmxlbmdlbmRHYXNfZGF0YV90aHJlZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIwLjAyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lY2hhcnRzLmRhdGFHYXNfdGhyZWVfamluZ2ppLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjAuMDMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG4xIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNzYpLAogICAgICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoMC4yNDUpCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3Byb2R1Y2UtZngvcWl0aWFuLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZ2FzSGFuZGVsKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVjaGFydHMuZGF0YUdhc19mb3VyX2ppc2h1LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmVjaGFydHMubGVuZ2VuZEdhc19kYXRhX2ZvdXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiMC4wMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZWNoYXJ0cy5kYXRhR2FzX2ZvdXJfamluZ2ppLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjAuMDMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWFwIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvWW91cWlHb25neWluZy/lnLDlm74ucG5nIiksCiAgICAgICAgICAgICAgYWx0OiAi5Zu+54mH5pyq5pi+56S6IgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaG90X21hcDEsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiaG90X21hcDEiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBzdGF0aWNDbGFzczogIm1hcDEiLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L2hvdG1hcF9vaWwucG5nIiksCiAgICAgICAgICAgICAgYWx0OiAi5Zu+54mH5pyq5pi+56S6IgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaG90X21hcDIsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiaG90X21hcDIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBzdGF0aWNDbGFzczogIm1hcDIiLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L2hvdG1hcF9nYXMucG5nIiksCiAgICAgICAgICAgICAgYWx0OiAi5Zu+54mH5pyq5pi+56S6IgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5vaWxTaG93ID8gdHJ1ZSA6IGZhbHNlLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAib2lsU2hvdz90cnVlOmZhbHNlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjaHVxaW5nX2NoYXJ0IgogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0YWJfb2lsIiB9LAogICAgICAgICAgICAgICAgX3ZtLl9sKF92bS50YWJsaXN0X29uZSwgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFsKICAgICAgICAgICAgICAgICAgICAgICAgeyB0YWJfb2lsX3R3bzogaW5kZXggPT0gX3ZtLnNlbGVjdGVkX29uZSB9LAogICAgICAgICAgICAgICAgICAgICAgICB7IHRhYl9vaWxfb25lOiB0cnVlIH0KICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YWJCdXR0b25fb25lKGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhpdGVtKSldCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb250U2l6ZV9kaXYiIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9udFNpemUiLAogICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnBpZV9udW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5waWVfbnVtYmVyID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInBpZV9udW1iZXIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhfdm0ucGllX251bWJlcikpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udFNpemVPbmUiIH0sIFtfdm0uX3YoIuS4h+WQqCIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImVjaGFydHMiLCBhdHRyczogeyBpZDogImVjaGFydHNPbmUiIH0gfSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5vaWxTaG93ID8gZmFsc2UgOiB0cnVlLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAib2lsU2hvdz9mYWxzZTp0cnVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjaGFydF90IgogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0YWJfb2lsIiB9LAogICAgICAgICAgICAgICAgX3ZtLl9sKF92bS50YWJsaXN0X3R3bywgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFsKICAgICAgICAgICAgICAgICAgICAgICAgeyB0YWJfb2lsX3R3bzogaW5kZXggPT0gX3ZtLnNlbGVjdGVkX3R3byB9LAogICAgICAgICAgICAgICAgICAgICAgICB7IHRhYl9vaWxfb25lOiB0cnVlIH0KICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YWJCdXR0b25fdHdvKGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhpdGVtKSldCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb250U2l6ZV9kaXYiIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9udFNpemUiLAogICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnBpZV9udW1iZXJfdHdvLAogICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0ucGllX251bWJlcl90d28gPSAkJHYKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicGllX251bWJlcl90d28iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhfdm0ucGllX251bWJlcl90d28pKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvbnRTaXplT25lIiB9LCBbX3ZtLl92KCLkur/nq4vmlrnnsbMiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJlY2hhcnRzIiwgYXR0cnM6IHsgaWQ6ICJlY2hhcnRzVHdvIiB9IH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNoYXJ0X3QiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgICAgIGhlaWdodDogIjhweCIsCiAgICAgICAgICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICIjREFEQkRCIiwKICAgICAgICAgICAgICAgICJtYXJnaW4tYm90dG9tIjogIjEwcHgiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRhYl9vaWwiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl9sKF92bS50YWJsaXN0X3RocmVlLCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgICBjbGFzczogWwogICAgICAgICAgICAgICAgICAgICAgICB7IHRhYl9vaWxfdHdvOiBpbmRleCA9PSBfdm0uc2VsZWN0ZWRfdGhyZWUgfSwKICAgICAgICAgICAgICAgICAgICAgICAgeyB0YWJfb2lsX29uZTogdHJ1ZSB9CiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGFiQnV0dG9uX3RocmVlKGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhpdGVtKSldCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJ0YWJsZSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6ICJib2xkIDEzcHggJ+W+rui9r+mbhem7kSciLAogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIiMzQTZEREEiLAogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogInJlbGF0aXZlIiwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAiMzBweCIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnRhYmxlVGhfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS50YWJsZVRoX25hbWUgPSAkJHYKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInRhYmxlVGhfbmFtZSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnRhYmxlVGhfbmFtZSkpLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIiNGRjkzMTEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvbnQtc3R5bGUiOiAiaXRhbGljIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiVG9wNSIpXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInRhYmxlIiwKICAgICAgICAgICAgICAgICAgICB7IGNsYXNzOiBbeyB0YWJsZV9vbmU6ICFfdm0uZyB9LCB7IHRhYmxlX3R3bzogX3ZtLmcgfV0gfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgInRyIiwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS50YWJsZVRoX29uZSwgZnVuY3Rpb24odGgsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJ0aCIsIHsga2V5OiBpbmRleCB9LCBbX3ZtLl92KF92bS5fcyh0aCkpXSkKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLmxpc3REYXRhX29uZSwgZnVuY3Rpb24odHIsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAidHIiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsga2V5OiBpbmRleCB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoX3ZtLl9zKGluZGV4ICsgMSkpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX2wodHIsIGZ1bmN0aW9uKHRkLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoInRkIiwgeyBrZXk6IGluZGV4IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKHRkKSArICIgIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJ0YWJsZSIsCiAgICAgICAgICAgICAgICAgICAgeyBjbGFzczogW3sgdGFibGVfb25lOiBfdm0uZyB9LCB7IHRhYmxlX3R3bzogIV92bS5nIH1dIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJ0ciIsCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbChfdm0udGFibGVUaF90d28sIGZ1bmN0aW9uKHRoLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfYygidGgiLCB7IGtleTogaW5kZXggfSwgW192bS5fdihfdm0uX3ModGgpKV0pCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5saXN0RGF0YV90d28sIGZ1bmN0aW9uKHRyLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgInRyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IGtleTogaW5kZXggfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KF92bS5fcyhpbmRleCArIDEpKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKHRyLCBmdW5jdGlvbih0ZCwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJ0ZCIsIHsga2V5OiBpbmRleCB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyh0ZCkgKyAiICIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7IG5hbWU6ICJzaG93IiwgcmF3TmFtZTogInYtc2hvdyIsIHZhbHVlOiBfdm0uYiwgZXhwcmVzc2lvbjogImIiIH0KICAgICAgICAgIF0sCiAgICAgICAgICBhdHRyczogeyBpZDogInByb2R1Y2VfY29udGVudCIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJidG5fc2hlbmNoYW4iIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJidG5fc2hlbmNoYW5fZGl2IiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgY2xhc3M6IFsKICAgICAgICAgICAgICAgICAgICB7IGJ0bl9zaGVuY2hhbl94dWFuOiBfdm0uYnRuX3NoZW5jaGFuX251bSB9LAogICAgICAgICAgICAgICAgICAgIHsgYnRuX3NoZW5jaGFuX3dlaTogIV92bS5idG5fc2hlbmNoYW5fbnVtIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRhYkJ1dHRvbl9wcm9kdWNlKDEpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nX3Byb2R1Y2UiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLmltZ1VybCwgYWx0OiAi5Zu+54mH5pyq5pi+56S6IiB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogImFic29sdXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAiOHB4IiwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogIjI1cHgiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCLljp/msrnlpKnnhLbmsJTnlJ/kuqciKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgY2xhc3M6IFsKICAgICAgICAgICAgICAgICAgICB7IGJ0bl9zaGVuY2hhbl94dWFuOiAhX3ZtLmJ0bl9zaGVuY2hhbl9udW0gfSwKICAgICAgICAgICAgICAgICAgICB7IGJ0bl9zaGVuY2hhbl93ZWk6IF92bS5idG5fc2hlbmNoYW5fbnVtIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRhYkJ1dHRvbl9wcm9kdWNlKDApCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nX3Byb2R1Y2UiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLmltZ1VybDIsIGFsdDogIuWbvueJh+acquaYvuekuiIgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICJhYnNvbHV0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogIjMycHgiLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAiMjVweCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIueCvOWMlueFpOWMluS8geS4mueUn+S6pyIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2N0YWJsZV95eCwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInNjdGFibGVfeXgiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0bl9zaGVuZ2NoYW5feW91eGlhIgogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJidG5fc2hlbmNoYW5fZGl2IiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvU2hvdyA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWdfcHJvZHVjZV95eCIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IF92bS5pbWdVcmxfb2lsX2ppbmcsIGFsdDogIuWbvueJh+acquaYvuekuiIgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBidG5fZ2Fzb2lsX3RhYjogX3ZtLnByb1Nob3cgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IGJ0bl9nYXNvaWxfdGFiX3R3bzogIV92bS5wcm9TaG93IH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIuWOn+ayuSIpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcm9TaG93ID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWdfcHJvZHVjZV95eCIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IF92bS5pbWdVcmxfZ2FzX2ppbmcsIGFsdDogIuWbvueJh+acquaYvuekuiIgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBidG5fb2lsZ2FzX3RhYjogX3ZtLnByb1Nob3cgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IGJ0bl9vaWxnYXNfdGFiX3R3bzogIV92bS5wcm9TaG93IH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIuWkqeeEtuawlCIpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubGhtdGFibGVfeXgsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJsaG10YWJsZV95eCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuX2xpYW5odWFtZWlfeW91eGlhIgogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nX3Byb2R1Y2VfeXgiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IF92bS5pbWdVcmxfbGhtX2pzLCBhbHQ6ICLlm77niYfmnKrmmL7npLoiIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgICAgICAgICAgdG9wOiAiMnB4IiwKICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICIyM3B4IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigi5oiQ5ZOB5rK555Sf5Lqn5YiG5p6QIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nX3Byb2R1Y2VfeXgiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IF92bS5pbWdVcmxfbGhtX2ZzLCBhbHQ6ICLlm77niYfmnKrmmL7npLoiIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgICAgICAgICAgdG9wOiAiMjJweCIsCiAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAiMjNweCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIueFpOWItuayueeUn+S6p+WIhuaekCIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZ19wcm9kdWNlX3l4IiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBfdm0uaW1nVXJsX2xobV9ocywgYWx0OiAi5Zu+54mH5pyq5pi+56S6IiB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogImFic29sdXRlIiwKICAgICAgICAgICAgICAgICAgICAgIHRvcDogIjQycHgiLAogICAgICAgICAgICAgICAgICAgICAgbGVmdDogIjIzcHgiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCLnhaTliLbmsJTnlJ/kuqfliIbmnpAiKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmQsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJkIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJwcm9kdWNlIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnByb1Nob3csCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicHJvU2hvdyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsYXktY29udGVudC1wcm8iLAogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuMDQzKSwKICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoMC43MTIpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLlkInnpaXmsrnnlLDljLrln58iKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5LiK5pyI5Lqn6YeP77yaMS405LiH5ZCoIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIue0r+iuoeS6p+mHj++8mjQuMuS4h+WQqCIpXSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGF5LWNvbnRlbnQtcHJvIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjE3OCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNTEyKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5YyF5bCU5rK555Sw5Yy65Z+fIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuS4iuaciOS6p+mHj++8mjIuNOS4h+WQqCIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLntK/orqHkuqfph4/vvJo1LjTkuIflkKgiKV0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImxheS1jb250ZW50LXBybyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC40MDgpLAogICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3ZtLmJlX2NsaWNrX3RvcCgwLjM4MikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuS6jOi/nuayueeUsOWMuuWfnyIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLkuIrmnIjkuqfph4/vvJoyLjTkuIflkKgiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi57Sv6K6h5Lqn6YeP77yaMzguN+S4h+WQqCIpXSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGF5LWNvbnRlbnQtcHJvIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjY4OCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuMTUyKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5rW35ouJ5bCU5rK555Sw5Yy65Z+fIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuS4iuaciOS6p+mHj++8mjXkuIflkKgiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi57Sv6K6h5Lqn6YeP77yaMjHkuIflkKgiKV0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImxheS1jb250ZW50LXBybyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC43KSwKICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoMC4zNjIpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLnp5HlsJTmsoHmsrnnlLDljLrln58iKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5LiK5pyI5Lqn6YeP77yaM+S4h+WQqCIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLntK/orqHkuqfph4/vvJoxMi425LiH5ZCoIildKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsYXktY29udGVudC1wcm8iLAogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNjQyKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi56eR5bCU5bq35rK555Sw5Yy65Z+fIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuS4iuaciOS6p+mHj++8mjEuNOS4h+WQqCIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLntK/orqHkuqfph4/vvJozLjM25LiH5ZCoIildKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG4yIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuMzMzKSwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNzE4KQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L3NjX3lqLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGFuY2h1YW5nU2hvdygKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5saXN0RGF0YV9wcm8xLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnRhYmxlVGgxX3BybwogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsaWNrYnRuMiIsCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjQ2MyksCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3ZtLmJlX2NsaWNrX3RvcCgwLjY0KQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L3NjX3lqLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGFuY2h1YW5nU2hvdygKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5saXN0RGF0YV9wcm8yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnRhYmxlVGgxX3BybwogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsaWNrYnRuMyIsCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjU1OSksCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3ZtLmJlX2NsaWNrX3RvcCgwLjU1KQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L3NjX3lqLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGFuY2h1YW5nU2hvdygKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5saXN0RGF0YV9wcm8zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnRhYmxlVGgxX3BybwogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsaWNrYnRuMiIsCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjY0OSksCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3ZtLmJlX2NsaWNrX3RvcCgwLjI5NykKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvcHJvZHVjZS1meC9zY195ai5wbmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAi5Zu+54mH5pyq5pi+56S6IgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRhbmNodWFuZ1Nob3coCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubGlzdERhdGFfcHJvNCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS50YWJsZVRoMV9wcm8KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbGlja2J0bjIiLAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC4zMzMpLAogICAgICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoMC43MTgpCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3Byb2R1Y2UtZngvc2NfeWoucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YW5jaHVhbmdTaG93KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmxpc3REYXRhX3BybzUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udGFibGVUaDFfcHJvCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG4yIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNzU5KSwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNTUpCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3Byb2R1Y2UtZngvc2NfeWoucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YW5jaHVhbmdTaG93KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmxpc3REYXRhX3BybzYsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udGFibGVUaDFfcHJvCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucHJvU2hvdyA/IGZhbHNlIDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwcm9TaG93P2ZhbHNlOnRydWUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGF5LWNvbnRlbnQtZ2FzIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjAxMyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNzEyKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi6IuP6YeM5qC85rCU55Sw5Yy65Z+fIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuS4iuaciOS6p+mHj++8mjEy5Lq/56uL5pa557GzIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIue0r+iuoeS6p+mHj++8mjE3NuS6v+eri+aWueexsyIpXSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGF5LWNvbnRlbnQtZ2FzIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjEyOCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNDYyKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5YyF5bCU5rCU55Sw5Yy65Z+fIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuS4iuaciOS6p+mHj++8mjAuNTLkur/nq4vmlrnnsbMiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi57Sv6K6h5Lqn6YeP77yaMy45MuS6v+eri+aWueexsyIpXSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGF5LWNvbnRlbnQtZ2FzIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjYwOCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNTYyKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5LqM6L+e5rCU55Sw5Yy65Z+fIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuS4iuaciOS6p+mHj++8mjAuNjjkur/nq4vmlrnnsbMiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi57Sv6K6h5Lqn6YeP77yaNi44OOS6v+eri+aWueexsyIpXSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGF5LWNvbnRlbnQtZ2FzIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjM4OCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuMDkyKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdigi5rW35ouJ5bCU5rCU55Sw5Yy65Z+fIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIuS4iuaciOS6p+mHj++8mjAuOOS6v+eri+aWueexsyIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCLntK/orqHkuqfph4/vvJo5Ljjkur/nq4vmlrnnsbMiKV0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbGlja2J0bjMiLAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC4zNTkpLAogICAgICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoMC43NjgpCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3Byb2R1Y2UtZngvc2NfcWoucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YW5jaHVhbmdTaG93KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmxpc3REYXRhX2dhczEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udGFibGVUaDFfZ2FzCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG4yIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNDg5KSwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNTg1KQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L3NjX3FqLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGFuY2h1YW5nU2hvdygKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5saXN0RGF0YV9nYXMyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnRhYmxlVGgxX2dhcwogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsaWNrYnRuMiIsCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdCgwLjYzOSksCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogX3ZtLmJlX2NsaWNrX3RvcCgwLjUwMSkKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvcHJvZHVjZS1meC9zY19xai5wbmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAi5Zu+54mH5pyq5pi+56S6IgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRhbmNodWFuZ1Nob3coCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ubGlzdERhdGFfZ2FzMywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS50YWJsZVRoMV9nYXMKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbGlja2J0bjIiLAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogX3ZtLmJlX2NsaWNrX2xlZnQoMC42NzkpLAogICAgICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoMC4yMzcpCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3Byb2R1Y2UtZngvc2NfcWoucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YW5jaHVhbmdTaG93KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmxpc3REYXRhX2dhczQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udGFibGVUaDFfZ2FzCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1hcCIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6IF92bS5wcm9TaG93ID8gX3ZtLnNyY3BybyA6IF92bS5zcmNwcm8xLAogICAgICAgICAgICAgICAgICBhbHQ6ICLlm77niYfmnKrmmL7npLoiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaGFydCIgfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGFiX29pbCIgfSwKICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS50YWJsaXN0X2ZvdXIsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF90d286IGluZGV4ID09IF92bS5zZWxlY3RlZF9mb3VyIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0YWJfb2lsX29uZTogdHJ1ZSB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YWJCdXR0b25fZm91cihpbmRleCkKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhpdGVtKSldCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWNoYXJ0c19uZXciLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImVjaGFydHNUaHJlZSIgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNoYXJ0IHBpZV9jaGFydCIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjhweCIsCiAgICAgICAgICAgICAgICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICIjREFEQkRCIiwKICAgICAgICAgICAgICAgICAgICAgICJtYXJnaW4tYm90dG9tIjogIjEwcHgiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRhYl9vaWwiIH0sCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS50YWJsaXN0X2ZpdmUsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF90d286IGluZGV4ID09IF92bS5zZWxlY3RlZF9maXZlIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRhYl9vaWxfb25lOiB0cnVlIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGFiQnV0dG9uX2ZpdmUoaW5kZXgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhpdGVtKSldCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS52YWx1ZTEgPT09IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInZhbHVlMSA9PT0gMCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9udFNpemVfZGl2IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb250U2l6ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucGllX29uZV9udW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5waWVfb25lX251bWJlciA9ICQkdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwaWVfb25lX251bWJlciIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5waWVfb25lX251bWJlcikpXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9udFNpemVPbmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnBpZV9vbmVfdW5pdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnBpZV9vbmVfdW5pdCA9ICQkdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwaWVfb25lX3VuaXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhfdm0ucGllX29uZV91bml0KSldCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAidmFuLWRyb3Bkb3duLW1lbnUiLAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ2YW4tZHJvcGRvd24taXRlbSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb3B0aW9uczogX3ZtLm9wdGlvbjEgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsgY2hhbmdlOiBfdm0uY2hhbmdlQ2hhcnQgfSwKICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnZhbHVlMSwKICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udmFsdWUxID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidmFsdWUxIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS52YWx1ZTEgPT09IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInZhbHVlMSA9PT0gMCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWNoYXJ0c19vbmUgZWNoYXJ0X2JnIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiwgaGVpZ2h0OiAiMTAwJSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJlY2hhcnRzRm91ciIgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnZhbHVlMSAhPT0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidmFsdWUxICE9PSAwIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJlY2hhcnRzX29uZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAwJSIsIGhlaWdodDogIjEwMCUiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZWNoYXJ0c0JhciIgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNoYXJ0IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiOHB4IiwKICAgICAgICAgICAgICAgICAgICAiYmFja2dyb3VuZC1jb2xvciI6ICIjREFEQkRCIiwKICAgICAgICAgICAgICAgICAgICAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRhYl9vaWwiIH0sCiAgICAgICAgICAgICAgICAgIF92bS5fbChfdm0udGFibGlzdF9zaXgsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF90d286IGluZGV4ID09IF92bS5zZWxlY3RlZF9zaXggfSwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRhYl9vaWxfb25lOiB0cnVlIH0KICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRhYkJ1dHRvbl9zaXgoaW5kZXgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoaXRlbSkpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uYmFjb2xvciA9PSAxLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiYmFjb2xvcj09MSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9udERpdjIiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvbnRfbnVtIiB9LCBbX3ZtLl92KCI3MDY1IildKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvbnRfdW5pdCIgfSwgW192bS5fdigi5LiH5ZCoIildKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmJhY29sb3IgPT0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImJhY29sb3I9PTAiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvbnREaXYyIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb250X251bSIgfSwgW192bS5fdigiNzY2NSIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb250X3VuaXQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5LiH56uL5pa557GzIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgY2xhc3M6IFsKICAgICAgICAgICAgICAgICAgICB7IGVjaGFydHNPbmU6IF92bS5iYWNvbG9yIH0sCiAgICAgICAgICAgICAgICAgICAgeyBlY2hhcnRzVHdvOiAhX3ZtLmJhY29sb3IgfQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImVjaGFydHNGaXZlIiB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmQsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIhZCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAicHJvZHVjZV9yZWZpbmUiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucHJvZHVjZV90YywKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwcm9kdWNlX3RjIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwcm9kdWNlX3RjIiwKICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfdm0uYmVfY2xpY2tfbGVmdChfdm0ucGFnZV9jWzVdKSwKICAgICAgICAgICAgICAgICAgICB0b3A6IF92bS5iZV9jbGlja190b3AoX3ZtLnBhZ2VfY1s2XSkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoX3ZtLl9zKF92bS5wYWdlX2NbMF0pKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5LyB5Lia5Lq65pWw77yaIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoX3ZtLl9zKF92bS5wYWdlX2NbMV0pKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLkuroiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5LiK5pyI57KJ54Wk5Yqg5bel6YeP77yaIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoX3ZtLl9zKF92bS5wYWdlX2NbMl0pKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLkuIflkKgiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5LiK5pyI5aSp54S25rCU5Lqn6YeP77yaIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoX3ZtLl9zKF92bS5wYWdlX2NbM10pKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLkuIfnq4vmlrnnsbMiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigi5LiK5pyI6ZSA6YeP77yaIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoX3ZtLl9zKF92bS5wYWdlX2NbNF0pKV0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0ucGFnZV9jWzddKSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG40IiwKICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNDE1KSwKICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuODE4KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L2xvZ29fZnMucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YW5jaHVhbmcoX3ZtLnByb2R1Y2VfdGMsIF92bS5wYWdlX2MyLCAxKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG40IiwKICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuMzc1KSwKICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNzg1KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L2xvZ29faHMucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YW5jaHVhbmcoX3ZtLnByb2R1Y2VfdGMsIF92bS5wYWdlX2MzLCAyKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG40IiwKICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNDM1KSwKICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNzU4KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L2xvZ29fZnMucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YW5jaHVhbmcoX3ZtLnByb2R1Y2VfdGMsIF92bS5wYWdlX2M0LCAzKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG40IiwKICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNDkzKSwKICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNzExKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L2xvZ29fanMucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YW5jaHVhbmcoX3ZtLnByb2R1Y2VfdGMsIF92bS5wYWdlX2M1LCA0KQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xpY2tidG40IiwKICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgIGxlZnQ6IF92bS5iZV9jbGlja19sZWZ0KDAuNzE3KSwKICAgICAgICAgICAgICAgICAgdG9wOiBfdm0uYmVfY2xpY2tfdG9wKDAuNTg2KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L2xvZ29faHMucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS50YW5jaHVhbmcoX3ZtLnByb2R1Y2VfdGMsIF92bS5wYWdlX2MxLCA1KQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWFwIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9wcm9kdWNlLWZ4L3Byb2R1Y2VtYXAucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIuWbvueJh+acquaYvuekuiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmRlZmF1bHRfdCgkZXZlbnQpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNoYXJ0IiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0YWJfb2lsIiB9LAogICAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLnRhYmxpc3Rfc2V2ZW4sIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF9mb3VyOiBpbmRleCA9PSBfdm0uc2VsZWN0ZWRfc2V2ZW4gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRhYl9vaWxfdGhyZWU6IHRydWUgfQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGFiQnV0dG9uX3NldmVuKGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKGl0ZW0pKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJlY2hhcnRzX25ldyIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZWNoYXJ0c1NpeCIgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNoYXJ0IHBpZV9jaGFydCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjhweCIsCiAgICAgICAgICAgICAgICAgICAgImJhY2tncm91bmQtY29sb3IiOiAiI0RBREJEQiIsCiAgICAgICAgICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMTBweCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0YWJfb2lsIiB9LAogICAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLnRhYmxpc3RfZWlnaHQsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF90d286IGluZGV4ID09IF92bS5zZWxlY3RlZF9laWdodCB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIHsgdGFiX29pbF9vbmU6IHRydWUgfQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGFiQnV0dG9uX2VpZ2h0KGluZGV4KQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKGl0ZW0pKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmsxLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiazEiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAidmFuLWRyb3Bkb3duLW1lbnUiLAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygidmFuLWRyb3Bkb3duLWl0ZW0iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb3B0aW9uczogX3ZtLm9wdGlvbjEgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogeyBjaGFuZ2U6IF92bS5zZWxTdHJjSGFuZGVsIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2VsU3RyYywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNlbFN0cmMgPSAkJHYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic2VsU3RyYyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5zZWxTdHJjID09PSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInNlbFN0cmM9PT0wIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZWNoYXJ0c19vbmUgZWNoYXJ0X2JnbmV3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImVjaGFydHNFaWdodCIgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5zZWxTdHJjICE9PSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInNlbFN0cmMgIT09IDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImVjaGFydHNfb25lIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiLCBoZWlnaHQ6ICIxMDAlIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZWNoYXJ0c0VsZSIgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICFfdm0uazEsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIhazEiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAidmFuLWRyb3Bkb3duLW1lbnUiLAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygidmFuLWRyb3Bkb3duLWl0ZW0iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb3B0aW9uczogX3ZtLm9wdGlvbjEgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogeyBjaGFuZ2U6IF92bS5zZWxDaGFydCB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnRpbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS50aW1lID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInRpbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udGltZSA9PT0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0aW1lPT09MCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgxKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImVjaGFydHNfb25lIGVjaGFydF9iZ25ldyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJlY2hhcnRzTmluZSIgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS50aW1lICE9PSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInRpbWUgIT09IDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImVjaGFydHNfb25lIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjEwMCUiLCBoZWlnaHQ6ICIxMDAlIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiZWNoYXJ0c1RlbiIgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdCiAgICAgICkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udERpdiIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvbnRfbnVtIiB9LCBbX3ZtLl92KCIyODAiKV0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvbnRfdW5pdCIgfSwgW192bS5fdigi5LiH5ZCoIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb250RGl2IiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udF9udW0iIH0sIFtfdm0uX3YoIjE4MCIpXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9udF91bml0IiB9LCBbX3ZtLl92KCLkuIflkKgiKV0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}